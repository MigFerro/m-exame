package homeview

import (
    // "strconv"

    "github.com/MigFerro/exame/templates/layouts"
	exerciseview "github.com/MigFerro/exame/templates/exercise"
    "github.com/MigFerro/exame/data"
    "github.com/MigFerro/exame/entities"

)

templ Show(exercise entities.ExerciseWithChoicesEntity) {
    @layouts.Base(layouts.BaseOptions{ 
        Title: `+Exame - Exercícios Para Conquistar o Exame de Matemática`,
        Description: `Complementa o teu estudo para o exame de Matemática com exercícios de escolha múltipla, soluções detalhadas e feedback instantâneo do teu progresso.`,
        WithLatex:true,
        WithoutMargins: true,
        }) {

        <div class="flex flex-col md:flex-row justify-center items-center my-10 mx-[5%] md:mx-[10%]">
            <div class="max-w-md md:mr-[3%] rounded-xl border-2 border-gray-200 pl-9 pr-2 pb-9 pt-5">
                <h2 class="text-5xl font-bold text-gray-900 mt-5 mb-16">Mais exercícios, mais prática</h2>
                <ul class="w-4/5 text-lg text-gray-600 mb-8">
                    <li>
                        Resolve exercícios para preparares o teu exame de Matemática.
                    </li>
                    <li class="mt-7">
                        Avalia o teu raciocínio e corrige os teus erros através de soluções detalhadas.
                    </li>
                    <li class="mt-7">
                        Aumenta o teu nível de preparação e tenta atingir os
                        <span class="text-2xl text-green-700 font-bold">
                           100% 
                        </span>
                        !
                    </li>
                </ul>
            </div>

            <div class="max-w-fit md:ml-[5%]">
                @exerciseview.ExerciseToSolve(exercise, true)
            </div>

        </div>

        <div class="w-full bg-slate-100 py-10 mt-[6rem] mb-[6rem] text-xl text-gray-700 font-semibold text-center rounded-lg">
            <ul class="text-xl text-center">
                <li>
                   Resolve exercícios para preparares os teus exames
                </li>
                <li class="mt-5">
                    Avalia o teu progresso através do nível de preparação
                </li>
                <li class="mt-5">
                    Atinge os 
                    <span class="text-2xl text-green-700 font-bold">
                       100% 
                    </span>
                    para te sentires preparado/a!
                </li>
            </ul>
        </div>

        <div class="my-10 flex flex-col justify-center items-center" id="exame_container">
            <a href="/exercise" class="max-w-80 p-6 bg-blue-500 border border-gray-200 rounded-3xl shadow hover:cursor-pointer hover:bg-blue-800 opacity-0" _="on load transition opacity to 100">
                <h5 class="w-full text-center mb-2 text-2xl font-bold tracking-tight text-white">Resolve exercícios</h5>
            </a>
        </div>

        // <h3 class="mb-5 w-full text-center text-4xl font-bold">Exercícios de matérias específicas</h3>
        // <div class="mb-20 w-full text-center text-2xl text-blue-500 font-semibold">(brevemente...)</div>

        // @yearContainer() {
        //    <ul class="flex -mx-2.5">
        //        for _, year := range []string{"10", "11", "12"} {
        //            @yearButton(year, false, []data.ExerciseCategory{})
        //        }
        //    </ul>
        //    
        //}

    }
}


templ yearContainer() {
    <div class="flex flex-col justify-center items-center mx-[15%]" id="year_container">
        { children... }
    </div>

}

templ yearButton(year string, clicked bool, categoryList []data.ExerciseCategory) {
    if clicked {
        <li class="block w-1/3 mx-2.5">
            <div hx-get={ "/year-category-list?show=hide&showYear=" + year } hx-target="#year_container" hx-swap="outerHTML" class="block p-6 border border-gray-200 rounded-lg bg-gray-100 hover:cursor-pointer">
                <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900">{year}º ano</h5>
            </div>
        </li>
    } else {
        <li class="block w-1/3 mx-2.5">
            <div hx-get={ "/year-category-list?show=show&showYear=" + year } hx-target="#year_container" hx-swap="outerHTML" class="block p-6 bg-white border border-gray-200 rounded-lg shadow hover:cursor-pointer hover:bg-gray-100">
                <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900">{year}º ano</h5>
            </div>
        </li>
    }
}

templ YearExerciseCategoryList(showList bool, showListYear string, categoryList []data.ExerciseCategory) {
    @yearContainer() {
        <ul class="flex -mx-2.5">
            for _, year := range []string{"10", "11", "12"} {
                @yearButton(year, year == showListYear && showList, categoryList)
            }
        </ul>
        if showList {
            <ul class="w-1/2 pt-5">
                for _, category := range categoryList {
                    <li class="block w-full border-y border-gray-200 bg-white text-xl text-center font-medium hover:bg-gray-100">
                        // <a class="block w-full py-4" href={ templ.URL("/exercise?cat=" + strconv.Itoa(category.Iid)) }>
                         //   { category.Category }
                        // </a>

                        <span class="block w-full py-4">
                            { category.Category }
                        </span>
                    </li>
                }
            </ul>
        }
    }
}
