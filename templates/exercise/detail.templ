package exerciseview

import (
    "strings"
    "strconv"

    "github.com/MigFerro/exame/templates/layouts"
    templateutils "github.com/MigFerro/exame/templates/utils"
    "github.com/MigFerro/exame/entities"
    "github.com/MigFerro/exame/data"
)

templ ExerciseContainer() {
        <div class="pt-5 max-w-[900px]" id="exercise-container">
            { children... }
        </div>
}

templ ExerciseHead(exercise entities.ExerciseWithChoicesEntity) {
    <div class="p-10 mt-10 bg-blue-50 rounded-xl relative">
        for _, line := range strings.Split(exercise.ProblemText, "\n") {
            <p class="text-lg">{line}<br /></p>
        }

        if exercise.ExameYear != "" && exercise.ExameFase != "" {
            <p class="italic pt-5 pb-1">{ templateutils.GetExameString(exercise.ExameYear, exercise.ExameFase) }</p>
        }

        <div class="inline-flex items-center justify-between p-1.5 bg-indigo-500 text-gray-50 border border-gray-100 rounded-xl absolute top-0 right-0">
            { exercise.Category.Category }
        </div>
    </div>
}

templ ShowExerciseDetail(exercise entities.ExerciseWithChoicesEntity) {
    @layouts.Base(layouts.BaseOptions{ WithLatex: true }) {
        @ExerciseContainer(){
            @ExerciseHead(exercise)

            <div id="choices-container">
                <div>
                    <ul class="grid w-full gap-6 md:grid-cols-4 pt-10">
                        for _, choice := range exercise.Choices {
                            <li>
                                <div for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-gray-700 font-bold bg-white border border-gray-200 rounded-lg cursor-pointer dark:border-gray-700 dark:peer-checked:text-blue-500 peer-checked:border-blue-600 peer-checked:text-blue-600"> 
                                    <div class="block w-full text-center">
                                        { choice.Value }
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    }
}

templ ShowExerciseToSolve(exercise entities.ExerciseWithChoicesEntity, loggedUser bool) {
    @layouts.Base(layouts.BaseOptions{ WithLatex: true }) {
        <div class="relative">
            @ExerciseContainer(){
                @ExerciseHead(exercise)

                <div id="choices-container">
                    <form method="POST">
                        <ul class="grid w-full gap-6 md:grid-cols-4 pt-10">
                            for i, choice := range exercise.Choices {
                                <li>
                                    if i == 0 {
                                        <input type="radio" id={ choice.Id.String() } name="choice" value={ choice.Id.String() } class="hidden peer" required />
                                    } else {
                                        <input type="radio" id={ choice.Id.String() } name="choice" value={ choice.Id.String() } class="hidden peer" />
                                    }

                                    <label for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-gray-700 font-bold bg-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-blue-500 peer-checked:border-blue-600 peer-checked:text-blue-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">                           
                                        <div class="block w-full text-center">
                                            { choice.Value }
                                        </div>
                                    </label>
                                </li>
                            }
                        </ul>

                        <div class="flex justify-end">
                            <div class="flex justify-center my-10">
                                <div></div>
                                <input class="text-white text-xl font-semibold bg-blue-500 hover:bg-indigo-800 hover:cursor-pointer focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-xl w-full sm:w-auto px-5 py-2.5 text-center" type="submit" value="Responder" />

                                <a href="/exercise" class="flex justify-between items-center bg-white ring-1 ring-gray-300 ring-inset py-1 px-2.5 ml-10 text-gray-400 font-semibold text-lg rounded-xl hover:outline-none hover:ring-2 hover:ring-indigo-500 focus:ring-4 focus:outline-none focus:ring-blue-300">
                                    <span class="mr-2">Saltar exercício</span>

                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                      <path stroke-linecap="round" stroke-linejoin="round" d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5" />
                                    </svg>
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            }

            if (!loggedUser) {
                <div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">

                  <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

                  <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
                    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">

                      <div class="relative transform overflow-hidden rounded-lg bg-white shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                        <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                          <div class="flex-col items-center">
                            <h2 class="text-3xl font-bold text-blue-500 mb-5">+Exame</h2>
                            <p class="text-sm text-gray-500 mb-5">Entra na tua conta ou regista-te para resolveres exercícios e ganhares pontos!</p>
                            <div class="mt-3 text-left sm:ml-4 sm:mt-0 sm:text-left">
                              <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Entrar / Registar:</h3>
                              <ul class="mt-2 flex-row justify-center">
                                 <li>
                                    <a href="/auth/google">Google</a>
                                 </li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
            }
        </div>
    }
}

templ ShowExerciseResult(result data.ExerciseSolved) {
    @layouts.Base(layouts.BaseOptions{ WithLatex: true }) {

            <div class="w-ful text-center text-xl font-bold">
                if result.Points >= 0 {
                    <p class="text-green-500">
                        { "+" + strconv.Itoa(result.Points) + " pontos" }
                    </p>
                } else {
                    <p class="text-red-500">
                        { strconv.Itoa(result.Points) + " pontos" }
                    </p>
                }
            </div>

            @ExerciseContainer(){
                @ExerciseHead(result.Exercise)

                <div id="choices-container">
                    <div>
                        <ul class="grid w-full gap-6 md:grid-cols-4 pt-10">
                            for _, choice := range result.Exercise.Choices {
                                if choice.IsSolution {
                                    <li>
                                        <div for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-green-500 font-bold bg-white border-2 border-green-500 rounded-lg"> 
                                            <div class="block w-full text-center">
                                                { choice.Value }
                                            </div>
                                        </div>
                                    </li>
                                } else if choice.Id.String() == result.ChoiceSelectedId {
                                    <li>
                                        <div for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-red-500 font-bold bg-white border-2 border-red-500 rounded-lg"> 
                                            <div class="block w-full text-center">
                                                { choice.Value }
                                            </div>
                                        </div>
                                    </li>
                                } else {
                                    <li>
                                        <div for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-gray-700 font-bold bg-white border-2 border-gray-200 rounded-lg"> 
                                            <div class="block w-full text-center">
                                                { choice.Value }
                                            </div>
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>

            <div class="flex justify-between my-10">
                <div class="flex items-center">
                    if result.PreviousExerciseId.Valid {
                        <a href={ templ.SafeURL("/exercises/" + result.PreviousExerciseId.UUID.String() + "/result" ) }>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-8 h-8 stroke-blue-500 hover:stroke-indigo-500">
                              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                            </svg>
                        </a>
                    } else {
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.0" stroke="currentColor" class="w-8 h-8 stroke-gray-300">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                        </svg>
                    }
                    if result.NextExerciseId.Valid {
                        <a href={ templ.SafeURL("/exercises/" + result.NextExerciseId.UUID.String() + "/result" ) }>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-8 h-8 stroke-blue-500 hover:stroke-indigo-500">
                              <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                            </svg>
                        </a>
                    } else {
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.0" stroke="currentColor" class="w-8 h-8 stroke-gray-300">
                          <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                        </svg>
                    }

                </div>
                
                <a href="/exercise" class="flex justify-between bg-blue-500 py-2.5 px-5 text-white font-medium text-lg rounded-xl hover:bg-indigo-500 focus:ring-4 focus:outline-none focus:ring-blue-300">
                    <span class="mr-2">Próximo exercício</span>

                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                    </svg>
                </a>
            </div>

            }

    }
}
