package exerciseview

import (
    "strings"

    "github.com/MigFerro/exame/templates/layouts"
    templateutils "github.com/MigFerro/exame/templates/utils"
    "github.com/MigFerro/exame/entities"
    "github.com/MigFerro/exame/data"
)

templ ExerciseContainer() {
        <div class="pt-5 w-3/4" id="exercise-container">
            { children... }
        </div>
}

templ ExerciseHead(exercise entities.ExerciseWithChoicesEntity) {
    <div class="p-10 mt-10 bg-blue-50 rounded-xl relative">
        for _, line := range strings.Split(exercise.ProblemText, "\n") {
            <p class="text-lg">{line}<br /></p>
        }

        if exercise.ExameYear != "" && exercise.ExameFase != "" {
            <p class="italic pt-5 pb-1">{ templateutils.GetExameString(exercise.ExameYear, exercise.ExameFase) }</p>
        }

        <div class="inline-flex items-center justify-between p-1.5 bg-indigo-500 text-gray-50 border border-gray-100 rounded-xl absolute top-0 right-0">
            { exercise.Category.Category }
        </div>
    </div>
}

templ ShowExerciseDetail(exercise entities.ExerciseWithChoicesEntity) {
    @layouts.Base(layouts.BaseOptions{ WithLatex: true }) {
        @ExerciseContainer(){
            @ExerciseHead(exercise)

            <div id="choices-container">
                <div>
                    <ul class="grid w-full gap-6 md:grid-cols-4 pt-10">
                        for _, choice := range exercise.Choices {
                            <li>
                                <div for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-gray-700 font-bold bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-blue-600 peer-checked:text-blue-600"> 
                                    <div class="block w-full text-center">
                                        { choice.Value }
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    }
}

templ ExerciseToSolve(exercise entities.ExerciseWithChoicesEntity, loggedUser bool) {
    <div class="opacity-0 relative flex justify-center" id="exercise-parent" _="on load transition opacity to 100">
        @ExerciseContainer(){
            @ExerciseHead(exercise)

            <div id="choices-container">
                <form hx-post={"/exercises/" + exercise.Id.String() + "?content=True" } hx-target="#exercise-parent" hx-swap="outerHTML" hx-replace-url={"/exercises/" + exercise.Id.String() + "/result"}>
                    <ul class="grid w-full gap-6 md:grid-cols-4 pt-10">
                        for i, choice := range exercise.Choices {
                            <li>
                                if i == 0 {
                                    <input type="radio" id={ choice.Id.String() } name="choice" value={ choice.Id.String() } class="hidden peer" required />
                                } else {
                                    <input type="radio" id={ choice.Id.String() } name="choice" value={ choice.Id.String() } class="hidden peer" />
                                }

                                <label for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-gray-700 font-bold bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-blue-600 peer-checked:text-blue-600 hover:text-gray-600 hover:bg-gray-100">                           
                                    <div class="block w-full text-center">
                                        { choice.Value }
                                    </div>
                                </label>
                            </li>
                        }
                    </ul>

                    <div class="w-full grid gap-6 md:grid-cols-2 my-10">
                            <input class="text-white text-xl font-semibold bg-blue-500 hover:bg-indigo-800 hover:cursor-pointer focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-xl w-full px-5 py-2.5 text-center" type="submit" value="Responder" />

                            <a href="/exercise" class="flex justify-center items-center bg-white ring-1 ring-gray-300 ring-inset py-2.5 px-5 lg:ml-[30%] text-gray-400 font-semibold text-lg rounded-xl hover:outline-none hover:ring-2 hover:ring-indigo-500 focus:ring-4 focus:outline-none focus:ring-blue-300">
                                <span class="mr-2">Saltar exercício</span>

                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                  <path stroke-linecap="round" stroke-linejoin="round" d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5" />
                                </svg>
                            </a>
                    </div>
                </form>
            </div>
        }

        if (!loggedUser) {
            @forceLoginModal() {}
        }
    </div>
}

templ ShowExerciseToSolve(exercise entities.ExerciseWithChoicesEntity, loggedUser bool) {
    @layouts.Base(layouts.BaseOptions{ WithLatex: true }) {
        @ExerciseToSolve(exercise, loggedUser) {}
    }
}

templ ExerciseResult(result data.ExerciseSolved) {
    <div class="opacity-0 relative flex justify-center" id="exercise-parent" _="on load transition opacity to 100">

        @ExerciseContainer(){
            if !result.NextExerciseId.Valid {
                <div class="flex justify-center lg:justify-start items-center">
                    <span class="text-2xl font-semibold text-gray-400">Nível de preparação:</span>
                    <div class="ml-5 lg:ml-7 text-4xl font-bold">
                      <div hx-get="/user/preplevel" hx-trigger="load"></div>
                    </div>
                </div>
            }

            @ExerciseHead(result.Exercise)

            <div id="choices-container">
                <div>
                    <ul class="grid w-full gap-6 md:grid-cols-4 pt-10">
                        for _, choice := range result.Exercise.Choices {
                            if choice.IsSolution {
                                <li>
                                    <div for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-green-500 font-bold bg-white border-2 border-green-500 rounded-lg"> 
                                        <div class="block w-full text-center">
                                            { choice.Value }
                                        </div>
                                    </div>
                                </li>
                            } else if choice.Id.String() == result.ChoiceSelectedId {
                                <li>
                                    <div for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-red-500 font-bold bg-white border-2 border-red-500 rounded-lg"> 
                                        <div class="block w-full text-center">
                                            { choice.Value }
                                        </div>
                                    </div>
                                </li>
                            } else {
                                <li>
                                    <div for={ choice.Id.String() } class="inline-flex items-center justify-between w-full p-5 text-gray-700 font-bold bg-white border-2 border-gray-200 rounded-lg"> 
                                        <div class="block w-full text-center">
                                            { choice.Value }
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>

        <div class="flex justify-between my-10">
            <div class="flex items-center">
                if result.PreviousExerciseId.Valid {
                    <div class="hover:cursor-pointer" hx-get={ "/exercises/" + result.PreviousExerciseId.UUID.String() + "/result?content=True" } hx-target="#exercise-parent" hx-swap="outerHTML" hx-replace-url={ "/exercises/" + result.PreviousExerciseId.UUID.String() + "/result" }>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-8 h-8 stroke-blue-500 hover:stroke-indigo-500">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                        </svg>
                    </div>
                } else {
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.0" stroke="currentColor" class="w-8 h-8 stroke-gray-300">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                    </svg>
                }
                if result.NextExerciseId.Valid {
                    <div class="hover:cursor-pointer" hx-get={ "/exercises/" + result.NextExerciseId.UUID.String() + "/result?content=True" } hx-target="#exercise-parent" hx-swap="outerHTML" hx-replace-url={ "/exercises/" + result.NextExerciseId.UUID.String() + "/result" }>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-8 h-8 stroke-blue-500 hover:stroke-indigo-500">
                          <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                        </svg>
                    </div>
                } else {
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.0" stroke="currentColor" class="w-8 h-8 stroke-gray-300">
                      <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                    </svg>
                }

            </div>
            
            <a href="/exercise" class="flex justify-between items-center bg-white py-2.5 px-5 text-blue-500 ring-1 ring-blue-500 ring-inset font-medium text-lg rounded-xl hover:bg-gray-200 focus:ring-4 focus:outline-none focus:ring-blue-300">
                <span class="mr-2">Próximo exercício</span>

                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-6 h-6 stroke-blue-500 hover:stroke-indigo-500">
                  <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                </svg>

            </a>
        </div>
        }
    </div>
}

templ ShowExerciseResult(result data.ExerciseSolved) {
    @layouts.Base(layouts.BaseOptions{ WithLatex: true }) {
        @ExerciseResult(result)
    }
}

templ forceLoginModal() {
    <div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">

      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

      <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">

          <div class="relative transform overflow-hidden rounded-lg bg-white shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
            <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
              <div class="flex-col items-center">
                <h2 class="text-3xl font-bold text-blue-500 mb-5">+Exame</h2>
                <p class="text-sm text-gray-500 mb-5">Entra na tua conta ou regista-te para resolveres exercícios e ganhares pontos!</p>
                <div class="mt-3 flex w-full justify-center sm:ml-4 sm:mt-0">
                    <a class="inline-flex justify-center items-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50" href="/auth/auth0">
                        <p class="pr-1">Entrar / Registar</p>
                        <img class="h-[15px] w-[15px] -rotate-90" src="/static/icons/login.svg" alt="Login icon" />
                    </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
}
