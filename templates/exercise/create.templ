package exerciseview

import (
    "strings"
    "strconv"

    "github.com/MigFerro/exame/templates/layouts"
    "github.com/MigFerro/exame/entities"
    "github.com/MigFerro/exame/data"
)

templ ShowPreview(previewText string) {
   <p id="preview">{ previewText }</p> 
}

templ ShowCreate(form *data.ExerciseUpsertForm, categories []entities.ExerciseCategoryEntity) {
    @layouts.Base(layouts.BaseOptions{ WithLatex: true, WithHTMX: false }) {
        <div class="pt-5">
            <div class="flex justify-between">
                <div class="w-1/2 shrink container">
                    <form method="post" id="exercise_create_form">
                        if form.ProblemText == "" {
                            <textarea class="border border-slate-300 px-5 py-5 w-full h-[15em]" id="problem_text" name="problem_text"
                            placeholder="Escreve aqui o texto do exercício..." required>
                            </textarea>
                        } else {
                            <textarea class="border border-slate-300 px-5 py-5 w-full h-[15em]" id="problem_text" name="problem_text" rows="20" cols="50" required>
                                { form.ProblemText }
                            </textarea>
                        }
                        <div class="pt-5">
                            for i, choice := range form.Choices {
                                <input type="text" id={ "choice" + strconv.Itoa(i) } name={ "choice" + strconv.Itoa(i) } value={ choice.Value } class="border border-slate-300 px-2 py-2" required/>
                                if choice.IsSolution {
                                    <input type="radio" id={ "choice" + strconv.Itoa(i) } value={ strconv.Itoa(i) } name="choice_solution" checked="checked"/>
                                } else {
                                    <input type="radio" id={ "choice" + strconv.Itoa(i) } value={ strconv.Itoa(i) } name="choice_solution"/>
                                }
                            }
                        </div>
                        <div class="pt-5">
                            <input type="text" id="exame_year" name="exame_year" class="border border-slate-300 px-2 py-2" value={ form.ExameYear }/>
                            <label for="exame_year">Ano do exame</label><br />

                            <input type="text" id="exame_fase" name="exame_fase" class="border border-slate-300 px-2 py-2" value={ form.ExameFase }/>
                            <label for="exame_year">Fase do exame</label><br />
                        </div>
                        <div class="pt-5">
                            <label for="category">Categoria</label>
                            <select name="category" id="category" form="exercise_create_form">
                                for _, cat := range categories {
                                    <option value={ strconv.Itoa(cat.Iid) }>{ cat.Category }</option>
                                }
                            </select>
                        </div>
                        <div class="pt-5">
                            <button class="btn-primary" type="submit" name="action" value="preview">Preview</button>
                            <button class="btn-primary" type="submit" name="action" value="save">Avançar</button>
                        </div>
                    </form>
                </div>
                <div class="w-1/2 shrink px-5 py-5">
                    for _, line := range strings.Split(form.ProblemText, "\n") {
                        <p>{line}<br /></p>
                    }
                </div>
            </div>
        </div>
    }
}

templ ShowSaveConfirmationPreview(form *data.ExerciseUpsertForm) {
    @layouts.Base(layouts.BaseOptions{ WithLatex: true, WithHTMX: false }) {
        <div class="pt-5">
        <form method="post">
            <div class="">

                if form.Id != "" {
                    <input type="hidden" id="id" name="id" value={ form.Id } />
                }

                <input type="hidden" id="problem_text" name="problem_text" value={ form.ProblemText } required/>

                for _, line := range strings.Split(form.ProblemText, "\n") {
                    <p>{line}<br /></p>
                }
                <div class="grid grid-cols-4 pt-7 w-1/2">
                    for i, choice := range form.Choices {
                        <div class="flex">
                            <p class="font-bold">{ []string{"(A) ", "(B) ", "(C) ", "(D) "}[i] }</p>
                            if choice.IsSolution {
                                <p class="pl-5 text-blue-500">{ choice.Value }<br /></p>
                                <input type="hidden" id={ "choice" + strconv.Itoa(i) } name="choice_solution" value={ strconv.Itoa(i) } />
                            } else {
                                <p class="pl-5">{ choice.Value }<br /></p>
                            }

                            <input type="hidden" id={ "choice" + strconv.Itoa(i) } name={ "choice" + strconv.Itoa(i) } value={ choice.Value } />
                            
                        </div>
                    }
                </div>
            </div>
            <div class="pt-5">
                <input type="hidden" id="exame_year" name="exame_year" value={ form.ExameYear }/>
                <input type="hidden" id="exame_fase" name="exame_fase" value={ form.ExameFase }/>
                <input type="hidden" id="category" name="category" value={ strconv.Itoa(form.Category.Iid) }/>
            </div>
            <div class="pt-7">
                <button class="btn-primary" type="submit" name="action" value="back">Voltar atrás</button>
                <button class="btn-primary" type="submit" name="action" value="confirm">Confirmar</button>
            </div>
        </form>
        </div>
    }
}

templ ExerciseSavedSuccessShow() {
    @layouts.Base(layouts.BaseOptions{ WithLatex: false, WithHTMX: false }) {
        <div class="pt-5">
            <p>O exercício foi criado com sucesso!</p>
        </div>
    }
    
}
